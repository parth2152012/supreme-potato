version: '3.8'

services:

  api:
    build: ./api
    ports:
      - "8000:8000"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - KAFKA_BROKER=kafka:9093
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - FRONTEND_ORIGIN=http://localhost:3000
    volumes:
      - ./api:/app

  ml_worker:
    build: ./ml_worker
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9093
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
      - ANOMALY_KEYWORDS=error,failed,denied,exception,attack,unauthorized
      - WHITELISTED_IPS=192.168.1.1,10.0.0.1
    volumes:
      - ./ml_worker:/app

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - api

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - es_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_LISTENERS=INTERNAL://:9093,EXTERNAL://:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=logs:1:1,config-updates:1:1 # Creates topics for logs and config updates
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  es_data:
